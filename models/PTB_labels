import pandas as pd
import numpy as np
import wfdb
import ast
import os
import matplotlib.pyplot as plt


def load_raw_data(df, sampling_rate, path):
    if sampling_rate == 100:
        data = [wfdb.rdsamp(path + f) for f in df.filename_lr]
    else:
        data = [wfdb.rdsamp(path + f) for f in df.filename_hr]
    data = np.array([signal for signal, meta in data])
    return data


path = '/Users/sylviachadha/Desktop/PTB-XL Database/'
sampling_rate = 100

# load and convert annotation data
Y = pd.read_csv(path + 'ptbxl_database.csv', index_col='ecg_id')
Y.scp_codes = Y.scp_codes.apply(lambda x: ast.literal_eval(x))

# Load raw signal data
X = load_raw_data(Y, sampling_rate, path)

# Load scp_statements.csv for diagnostic aggregation
agg_df = pd.read_csv(path + 'scp_statements.csv', index_col=0)
agg_df = agg_df[agg_df.diagnostic == 1]


def aggregate_diagnostic(y_dic):
    tmp = []
    for key in y_dic.keys():
        if key in agg_df.index:
            tmp.append(agg_df.loc[key].diagnostic_class)
    return list(set(tmp))


# Apply diagnostic superclass
Y['diagnostic_superclass'] = Y.scp_codes.apply(aggregate_diagnostic)

def aggregate_diagnostic1(y_dic):
    tmp = []
    for key in y_dic.keys():
        if key in agg_df.index:
            tmp.append(agg_df.loc[key].diagnostic_subclass)
    return list(set(tmp))


# Apply diagnostic subclass
Y['diagnostic_subclass'] = Y.scp_codes.apply(aggregate_diagnostic1)

# Split data into train and test - With superclass labels
test_fold = 10
# Train
X_train = X[np.where(Y.strat_fold != test_fold)]
y_train = Y[(Y.strat_fold != test_fold)].diagnostic_superclass
# Test
X_test = X[np.where(Y.strat_fold == test_fold)]
y_test = Y[Y.strat_fold == test_fold].diagnostic_superclass


# Split data into train and test -  With subclass labels
test_fold = 10
# Train
X_train1 = X[np.where(Y.strat_fold != test_fold)]
y_train1 = Y[(Y.strat_fold != test_fold)].diagnostic_subclass
# Test
X_test1 = X[np.where(Y.strat_fold == test_fold)]
y_test1 = Y[Y.strat_fold == test_fold].diagnostic_subclass

# Export to excel to shortlist class and subclass records
# X_train, X_test - Input
# Y_train, Y_test  - labels
# Y_train1, Y_test1 - sub-labels

# Make 2 dataframes of equal length
# X_train, Y_train, Y_train1

# Check is X_train and X_train1 same?
X_train == X_train1
X_test == X_test1

# Make a df of Input, Labels and Sub-labels
X_train,y_train,y_train1
X_test, y_test, y_test1

# Export to excel
y_train.to_csv('/Users/sylviachadha/Desktop/export/y_train.csv')
y_train1.to_csv('/Users/sylviachadha/Desktop/export/y_train1.csv')
y_test.to_csv('/Users/sylviachadha/Desktop/export/y_test.csv')
y_test1.to_csv('/Users/sylviachadha/Desktop/export/y_test1.csv')

# PTB Plots
# NORM, MI(IMI), STTC(NST), HYP(SEHYP), CD(IVCD)
# Database 1, 8, 26, 856, 1061

import plotly.io as pio
import plotly.graph_objects as go

pio.renderers.default = "browser"

def plots(ecg_id):
    # Extract particular patient ecg
    X_df_ecg = pd.DataFrame(X_train[ecg_id])

    # Extract 7th column as this refer to Lead V2; univariate data now
    X_df_ecg_Lead2 = X_df_ecg.iloc[:, 7]
    print(X_df_ecg_Lead2)

    # Change series to a dataframe
    df_ecg_V2 = pd.DataFrame({'Sample': X_df_ecg_Lead2.index, 'V2 value': X_df_ecg_Lead2.values})

    # Plot Dataframe
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df_ecg_V2['Sample'], y=df_ecg_V2['V2 value'],
                             mode='lines',
                             name='normal'))
    return fig.show()


# Call function to plot various types of ecg
plots(0)  #NORM
plots(7)  #MI(IMI)
plots(163) #STTC(ISCA)
plots(854)  #HYP(SEHYP)
plots(153) #CD(IRBBB)

